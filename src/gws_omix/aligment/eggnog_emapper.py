#!/usr/bin/env python3
"""
GWS Task : lance `_eggnog_emapper.py` dans l’environnement eggNOG.
"""
import os
from pathlib import Path
from typing import Final

from gws_core import (
    ConfigParams, ConfigSpecs, File,
    InputSpec, InputSpecs, IntParam,
    OutputSpec, OutputSpecs, ShellProxy,
    StrParam, Task, TaskInputs,
    TaskOutputs, task_decorator,
)
from gws_omix.base_env.eggnog_env_task import EggnogShellProxyHelper

###############################################################################
@task_decorator(
    "Emapper",
    human_name="eggNOG Mapper",
    short_description="Functional annotation with eggNOG-mapper (DIAMOND mode).",hide=True
)
class EggnogMapperTask(Task):

    input_specs: Final[InputSpecs] = InputSpecs({
        "fasta": InputSpec(
            File, human_name="FASTA file",
            short_description="Protein or transcript FASTA to annotate"),
    })

    output_specs: Final[OutputSpecs] = OutputSpecs({
        "annotation_table": OutputSpec(
            File, human_name="eggNOG annotations",
            short_description="*.emapper.annotations generated by eggNOG-mapper"),
    })

    config_specs: Final[ConfigSpecs] = ConfigSpecs({
        "itype": StrParam(
            default_value="proteins",
            allowed_values=["proteins", "transcripts"],
            short_description="Sequence type (proteins / transcripts)"),
        "cpus": IntParam(
            default_value=25, min_value=1,
            short_description="Number of CPU threads"),
    })

    python_file_path: Final[str] = os.path.join(
        os.path.abspath(os.path.dirname(__file__)), "_eggnog_emapper.py"
    )

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        fasta: File = inputs["fasta"]
        itype: str  = params["itype"]
        cpus:  int  = params["cpus"]

        shell: ShellProxy = EggnogShellProxyHelper.create_proxy(self.message_dispatcher)
        work_dir = Path(shell.working_dir)
        prefix   = Path(fasta.path).stem
        out_dir  = work_dir / f"{prefix}_output"

        cmd = (
            f"python3 {self.python_file_path} {fasta.path} "
            f"--itype {itype} --cpus {cpus} "
            f"--output-dir {out_dir}"
        )
        ret = shell.run(cmd, shell_mode=True)
        if ret != 0:
            raise RuntimeError("eggNOG-mapper terminated with errors – see logs")

        ann_file = out_dir / f"{prefix}.emapper.annotations"
        if not ann_file.exists():
            raise FileNotFoundError(f"Annotation file not found: {ann_file}")

        return {"annotation_table": File(str(ann_file))}
